{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","state","this","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","col","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","nodesToAnimate","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodeByDistance","closestNode","shift","Infinity","isVisited","updateNeighbours","sort","nodeA","nodeB","neighbours","filter","neighbour","getNeighbours","previousNode","PathfindingVisualizer","mouseIsPressed","isRunning","isStartNode","isFinishNode","isWalNode","currRow","currCol","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","getInitialGrid","currentRow","createNode","isVisisted","isWallNode","setState","newGrid","slice","document","getElementById","nodeClassName","distanceToFinishNode","Math","abs","isNode","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","clearGrid","visualizeDijkstra","clearWall","onMouseLeave","handleMouseLeave","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd2fea0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      col,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","export function dijkstra(grid, startNode, finishNode, nodesToAnimate) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodeByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // if we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // if the closest node is at a distance of infinity,\r\n    // we must be trapped, therefore should stop\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateNeighbours(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodeByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateNeighbours(node, grid) {\r\n  const neighbours = getNeighbours(node, grid);\r\n  for (const neighbour of neighbours) {\r\n    neighbour.distance = node.distance + 1;\r\n    neighbour.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  const neighbours = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nclass PathfindingVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    mouseIsPressed: false,\r\n    isRunning: false,\r\n    isStartNode: false,\r\n    isFinishNode: false,\r\n    isWalNode: false,\r\n    currRow: 0,\r\n    currCol: 0,\r\n    START_NODE_ROW: 10,\r\n    START_NODE_COL: 15,\r\n    FINISH_NODE_ROW: 10,\r\n    FINISH_NODE_COL: 35,\r\n    previousNode: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  isRunning() {\r\n    this.setState({ isRunning: !this.state.isRunning });\r\n  }\r\n\r\n  getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(this.createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  clearWall() {\r\n    const newGrid = this.state.grid.slice()\r\n    for (const row of newGrid) {\r\n      for (const node of row) {\r\n        let nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-wall'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node';\r\n          node.isWall = false\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    const newGrid = this.state.grid.slice()\r\n    for (const row of newGrid) {\r\n      for (const node of row) {\r\n        let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish' &&\r\n          nodeClassName !== 'node node-wall'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n          node.isVisited = false\r\n          node.distance = Infinity\r\n          node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col)\r\n        }\r\n        if (nodeClassName === 'node node-finish') {\r\n          node.isVisited = false\r\n          node.distance = Infinity\r\n          node.distanceToFinishNode = 0\r\n        }\r\n        if (nodeClassName === 'node node-start') {\r\n          node.isVisited = false\r\n          node.distance = Infinity\r\n          node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col)\r\n          node.isStart = true\r\n          node.isWall = false\r\n          node.previousNode = null\r\n          node.isNode = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      isVisisted: false,\r\n      isWallNode: false,\r\n      previousNode: null,\r\n    };\r\n  };\r\n\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (\r\n        document.getElementById(`node-${row}-${col}`).className ===\r\n        \"node node-start\"\r\n      ) {\r\n        this.setState({\r\n          mouseIsPressed: true,\r\n          isStartNode: true,\r\n          currRow: row,\r\n          currCol: col,\r\n        });\r\n      } else if (\r\n        document.getElementById(`node-${row}-${col}`).className ===\r\n        \"node node-finish\"\r\n      ) {\r\n        this.setState({\r\n          mouseIsPressed: true,\r\n          isFinishNode: true,\r\n          currRow: row,\r\n          currCol: col,\r\n        });\r\n      } else {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({\r\n          grid: newGrid,\r\n          mouseIsPressed: true,\r\n          isWallNode: true,\r\n          currRow: row,\r\n          currCol: col,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.mouseIsPressed) {\r\n      const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n        .className;\r\n      if (this.state.isStartNode) {\r\n        if (nodeClassName !== \"node node-wall\") {\r\n          const prevStartNode = this.state.grid[this.state.currRow][this.state.currCol];\r\n          prevStartNode.isStart = false;\r\n          document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = \"node\";\r\n          this.setState({ currRow: row, currCol: col });\r\n          const currStartNode = this.state.grid[row][col];\r\n          currStartNode.isStart = true;\r\n          document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\r\n        }\r\n        this.setState({ START_NODE_ROW: row, START_NODE_COL: col });\r\n      } else if (this.state.isFinishNode) {\r\n        if (nodeClassName !== \"node node-wall\") {\r\n          const prevFinishNode = this.state.grid[this.state.currRow][this.state.currCol];\r\n          prevFinishNode.isFinish = false;\r\n          document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = \"node\";\r\n          this.setState({ currRow: row, currCol: col });\r\n          const currFinishNode = this.state.grid[row][col];\r\n          currFinishNode.isFinish = true;\r\n          document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\r\n        }\r\n        this.setState({ FINISH_NODE_ROW: row, FINISH_NODE_COL: col });\r\n      } else if (this.state.isWallNode) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    this.setState({ mouseIsPressed: false });\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({ isStartNode, START_NODE_ROW: row, START_NODE_COL: col });\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({\r\n        isFinishNode,\r\n        FINISH_NODE_ROW: row,\r\n        FINISH_NODE_COL: col,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({ isStartNode, mouseIsPressed: false });\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({ isFinishNode, mouseIsPressed: false });\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({ isWallNode, mouseIsPressed: false });\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path\";\r\n        }\r\n      }, 50 * i);\r\n    }\r\n    this.isRunning();\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode =\r\n      grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n    const finishNode =\r\n      grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    // console.log(grid);\r\n    // test\r\n\r\n    return (\r\n      <>\r\n        <div className=\"nav-bar\">\r\n          <button onClick={() => { this.clearGrid(); this.visualizeDijkstra(); this.isRunning() }}>\r\n            Visualize Dijkstra's Algorithm\r\n        </button>\r\n          <button onClick={() => this.clearWall()}>Clear Wall</button>\r\n          <button onClick={() => this.clearGrid()}>Clear Grid</button>\r\n        </div>\r\n        <div\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}\r\n        >\r\n          <div className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <div key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {\r\n                      row,\r\n                      col,\r\n                      isStart,\r\n                      isFinish,\r\n                      isVisisted,\r\n                      isWall,\r\n                    } = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        row={row}\r\n                        isStart={isStart}\r\n                        isFinish={isFinish}\r\n                        isVisisted={isVisisted}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                      ></Node>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}